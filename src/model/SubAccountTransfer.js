/**
 * Gate API v4
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.GateApi) {
      root.GateApi = {};
    }
    root.GateApi.SubAccountTransfer = factory(root.GateApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The SubAccountTransfer model module.
   * @module model/SubAccountTransfer
   */

  /**
   * Constructs a new <code>SubAccountTransfer</code>.
   * @alias module:model/SubAccountTransfer
   * @class
   * @param currency {String} Transfer currency name
   * @param subAccount {String} Sub account user ID
   * @param direction {module:model/SubAccountTransfer.DirectionEnum} Transfer direction. to - transfer into sub account; from - transfer out from sub account
   * @param amount {String} Transfer amount
   */
  var exports = function(currency, subAccount, direction, amount) {
    var _this = this;

    _this['currency'] = currency;
    _this['sub_account'] = subAccount;
    _this['direction'] = direction;
    _this['amount'] = amount;
  };

  /**
   * Constructs a <code>SubAccountTransfer</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SubAccountTransfer} obj Optional instance to populate.
   * @return {module:model/SubAccountTransfer} The populated <code>SubAccountTransfer</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('sub_account')) {
        obj['sub_account'] = ApiClient.convertToType(data['sub_account'], 'String');
      }
      if (data.hasOwnProperty('direction')) {
        obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
      }
      if (data.hasOwnProperty('uid')) {
        obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
      }
      if (data.hasOwnProperty('timest')) {
        obj['timest'] = ApiClient.convertToType(data['timest'], 'String');
      }
      if (data.hasOwnProperty('source')) {
        obj['source'] = ApiClient.convertToType(data['source'], 'String');
      }
    }
    return obj;
  }

  /**
   * Transfer currency name
   * @member {String} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * Sub account user ID
   * @member {String} sub_account
   */
  exports.prototype['sub_account'] = undefined;
  /**
   * Transfer direction. to - transfer into sub account; from - transfer out from sub account
   * @member {module:model/SubAccountTransfer.DirectionEnum} direction
   */
  exports.prototype['direction'] = undefined;
  /**
   * Transfer amount
   * @member {String} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * Main account user ID
   * @member {String} uid
   */
  exports.prototype['uid'] = undefined;
  /**
   * Transfer timestamp
   * @member {String} timest
   */
  exports.prototype['timest'] = undefined;
  /**
   * Where the operation is initiated from
   * @member {String} source
   */
  exports.prototype['source'] = undefined;


  /**
   * Allowed values for the <code>direction</code> property.
   * @enum {String}
   * @readonly
   */
  exports.DirectionEnum = {
    /**
     * value: "to"
     * @const
     */
    "to": "to",
    /**
     * value: "from"
     * @const
     */
    "from": "from"  };


  return exports;
}));


