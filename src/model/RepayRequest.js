/**
 * Gate API v4
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.GateApi) {
      root.GateApi = {};
    }
    root.GateApi.RepayRequest = factory(root.GateApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';


  /**
   * The RepayRequest model module.
   * @module model/RepayRequest
   */

  /**
   * Constructs a new <code>RepayRequest</code>.
   * @alias module:model/RepayRequest
   * @class
   * @param currencyPair {String} Currency pair
   * @param currency {String} Loan currency
   * @param mode {module:model/RepayRequest.ModeEnum} Repay mode. all - repay all; partial - repay only some portion
   */
  var exports = function(currencyPair, currency, mode) {
    var _this = this;

    _this['currency_pair'] = currencyPair;
    _this['currency'] = currency;
    _this['mode'] = mode;
  };

  /**
   * Constructs a <code>RepayRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RepayRequest} obj Optional instance to populate.
   * @return {module:model/RepayRequest} The populated <code>RepayRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('currency_pair')) {
        obj['currency_pair'] = ApiClient.convertToType(data['currency_pair'], 'String');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('mode')) {
        obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
      }
    }
    return obj;
  }

  /**
   * Currency pair
   * @member {String} currency_pair
   */
  exports.prototype['currency_pair'] = undefined;
  /**
   * Loan currency
   * @member {String} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * Repay mode. all - repay all; partial - repay only some portion
   * @member {module:model/RepayRequest.ModeEnum} mode
   */
  exports.prototype['mode'] = undefined;
  /**
   * Repay amount. Required in `partial` mode
   * @member {String} amount
   */
  exports.prototype['amount'] = undefined;


  /**
   * Allowed values for the <code>mode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ModeEnum = {
    /**
     * value: "all"
     * @const
     */
    "all": "all",
    /**
     * value: "partial"
     * @const
     */
    "partial": "partial"  };


  return exports;
}));

