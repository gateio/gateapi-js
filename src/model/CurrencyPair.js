/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.GateApi) {
      root.GateApi = {};
    }
    root.GateApi.CurrencyPair = factory(root.GateApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';


  /**
   * The CurrencyPair model module.
   * @module model/CurrencyPair
   */

  /**
   * Constructs a new <code>CurrencyPair</code>.
   * Spot currency pair
   * @alias module:model/CurrencyPair
   * @class
   */
  var exports = function() {
    var _this = this;

  };

  /**
   * Constructs a <code>CurrencyPair</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CurrencyPair} obj Optional instance to populate.
   * @return {module:model/CurrencyPair} The populated <code>CurrencyPair</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('base')) {
        obj['base'] = ApiClient.convertToType(data['base'], 'String');
      }
      if (data.hasOwnProperty('quote')) {
        obj['quote'] = ApiClient.convertToType(data['quote'], 'String');
      }
      if (data.hasOwnProperty('fee')) {
        obj['fee'] = ApiClient.convertToType(data['fee'], 'String');
      }
      if (data.hasOwnProperty('min_base_amount')) {
        obj['min_base_amount'] = ApiClient.convertToType(data['min_base_amount'], 'String');
      }
      if (data.hasOwnProperty('min_quote_amount')) {
        obj['min_quote_amount'] = ApiClient.convertToType(data['min_quote_amount'], 'String');
      }
      if (data.hasOwnProperty('amount_precision')) {
        obj['amount_precision'] = ApiClient.convertToType(data['amount_precision'], 'Number');
      }
      if (data.hasOwnProperty('precision')) {
        obj['precision'] = ApiClient.convertToType(data['precision'], 'Number');
      }
      if (data.hasOwnProperty('trade_status')) {
        obj['trade_status'] = ApiClient.convertToType(data['trade_status'], 'String');
      }
      if (data.hasOwnProperty('sell_start')) {
        obj['sell_start'] = ApiClient.convertToType(data['sell_start'], 'Number');
      }
      if (data.hasOwnProperty('buy_start')) {
        obj['buy_start'] = ApiClient.convertToType(data['buy_start'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Currency pair
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Base currency
   * @member {String} base
   */
  exports.prototype['base'] = undefined;
  /**
   * Quote currency
   * @member {String} quote
   */
  exports.prototype['quote'] = undefined;
  /**
   * Trading fee
   * @member {String} fee
   */
  exports.prototype['fee'] = undefined;
  /**
   * Minimum amount of base currency to trade, `null` means no limit
   * @member {String} min_base_amount
   */
  exports.prototype['min_base_amount'] = undefined;
  /**
   * Minimum amount of quote currency to trade, `null` means no limit
   * @member {String} min_quote_amount
   */
  exports.prototype['min_quote_amount'] = undefined;
  /**
   * Amount scale
   * @member {Number} amount_precision
   */
  exports.prototype['amount_precision'] = undefined;
  /**
   * Price scale
   * @member {Number} precision
   */
  exports.prototype['precision'] = undefined;
  /**
   * How currency pair can be traded  - untradable: cannot be bought or sold - buyable: can be bought - sellable: can be sold - tradable: can be bought or sold
   * @member {module:model/CurrencyPair.TradeStatusEnum} trade_status
   */
  exports.prototype['trade_status'] = undefined;
  /**
   * 允许卖出时间，秒级 Unix 时间戳
   * @member {Number} sell_start
   */
  exports.prototype['sell_start'] = undefined;
  /**
   * 允许买入时间，秒级 Unix 时间戳
   * @member {Number} buy_start
   */
  exports.prototype['buy_start'] = undefined;


  /**
   * Allowed values for the <code>trade_status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TradeStatusEnum = {
    /**
     * value: "untradable"
     * @const
     */
    "untradable": "untradable",
    /**
     * value: "buyable"
     * @const
     */
    "buyable": "buyable",
    /**
     * value: "sellable"
     * @const
     */
    "sellable": "sellable",
    /**
     * value: "tradable"
     * @const
     */
    "tradable": "tradable"  };


  return exports;
}));

