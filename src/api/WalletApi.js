/**
 * Gate API v4
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DepositAddress', 'model/LedgerRecord', 'model/SubAccountTransfer', 'model/Transfer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DepositAddress'), require('../model/LedgerRecord'), require('../model/SubAccountTransfer'), require('../model/Transfer'));
  } else {
    // Browser globals (root is window)
    if (!root.GateApi) {
      root.GateApi = {};
    }
    root.GateApi.WalletApi = factory(root.GateApi.ApiClient, root.GateApi.DepositAddress, root.GateApi.LedgerRecord, root.GateApi.SubAccountTransfer, root.GateApi.Transfer);
  }
}(this, function(ApiClient, DepositAddress, LedgerRecord, SubAccountTransfer, Transfer) {
  'use strict';

  /**
   * Wallet service.
   * @module api/WalletApi
   */

  /**
   * Constructs a new WalletApi. 
   * @alias module:api/WalletApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getDepositAddress operation.
     * @callback module:api/WalletApi~getDepositAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DepositAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate currency deposit address
     * @param {String} currency Currency name
     * @param {module:api/WalletApi~getDepositAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DepositAddress}
     */
    this.getDepositAddress = function(currency, callback) {
      var postBody = null;

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getDepositAddress");
      }


      var pathParams = {
      };
      var queryParams = {
        'currency': currency,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DepositAddress;

      return this.apiClient.callApi(
        '/wallet/deposit_address', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeposits operation.
     * @callback module:api/WalletApi~listDepositsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LedgerRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve deposit records
     * Record time range cannot exceed 30 days
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency Filter by currency. Return all currency records if not specified
     * @param {Number} opts.from Time range beginning, default to 7 days before current time
     * @param {Number} opts.to Time range ending, default to current time
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {Number} opts.offset List offset, starting from 0 (default to 0)
     * @param {module:api/WalletApi~listDepositsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LedgerRecord>}
     */
    this.listDeposits = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'currency': opts['currency'],
        'from': opts['from'],
        'to': opts['to'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [LedgerRecord];

      return this.apiClient.callApi(
        '/wallet/deposits', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubAccountTransfers operation.
     * @callback module:api/WalletApi~listSubAccountTransfersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubAccountTransfer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer records between main and sub accounts
     * Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
     * @param {Object} opts Optional parameters
     * @param {String} opts.subUid Sub account user ID. Return records related to all sub accounts if not specified
     * @param {Number} opts.from Time range beginning, default to 7 days before current time
     * @param {Number} opts.to Time range ending, default to current time
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {Number} opts.offset List offset, starting from 0 (default to 0)
     * @param {module:api/WalletApi~listSubAccountTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubAccountTransfer>}
     */
    this.listSubAccountTransfers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'sub_uid': opts['subUid'],
        'from': opts['from'],
        'to': opts['to'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SubAccountTransfer];

      return this.apiClient.callApi(
        '/wallet/sub_account_transfers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listWithdrawals operation.
     * @callback module:api/WalletApi~listWithdrawalsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LedgerRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve withdrawal records
     * Record time range cannot exceed 30 days
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency Filter by currency. Return all currency records if not specified
     * @param {Number} opts.from Time range beginning, default to 7 days before current time
     * @param {Number} opts.to Time range ending, default to current time
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {Number} opts.offset List offset, starting from 0 (default to 0)
     * @param {module:api/WalletApi~listWithdrawalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LedgerRecord>}
     */
    this.listWithdrawals = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'currency': opts['currency'],
        'from': opts['from'],
        'to': opts['to'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [LedgerRecord];

      return this.apiClient.callApi(
        '/wallet/withdrawals', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transfer operation.
     * @callback module:api/WalletApi~transferCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer between accounts
     * Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures
     * @param {module:model/Transfer} transfer 
     * @param {module:api/WalletApi~transferCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.transfer = function(transfer, callback) {
      var postBody = transfer;

      // verify the required parameter 'transfer' is set
      if (transfer === undefined || transfer === null) {
        throw new Error("Missing the required parameter 'transfer' when calling transfer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/wallet/transfers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transferWithSubAccount operation.
     * @callback module:api/WalletApi~transferWithSubAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer between main and sub accounts
     * @param {module:model/SubAccountTransfer} subAccountTransfer 
     * @param {module:api/WalletApi~transferWithSubAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.transferWithSubAccount = function(subAccountTransfer, callback) {
      var postBody = subAccountTransfer;

      // verify the required parameter 'subAccountTransfer' is set
      if (subAccountTransfer === undefined || subAccountTransfer === null) {
        throw new Error("Missing the required parameter 'subAccountTransfer' when calling transferWithSubAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/wallet/sub_account_transfers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
