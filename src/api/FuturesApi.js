/**
 * Gate API v4
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * OpenAPI spec version: 4.5.1
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Contract', 'model/FundingRateRecord', 'model/FuturesAccount', 'model/FuturesAccountBook', 'model/FuturesCandlestick', 'model/FuturesOrder', 'model/FuturesOrderBook', 'model/FuturesPriceTriggeredOrder', 'model/FuturesTicker', 'model/FuturesTrade', 'model/InsuranceRecord', 'model/MyFuturesTrade', 'model/Position', 'model/PositionClose', 'model/TriggerOrderResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Contract'), require('../model/FundingRateRecord'), require('../model/FuturesAccount'), require('../model/FuturesAccountBook'), require('../model/FuturesCandlestick'), require('../model/FuturesOrder'), require('../model/FuturesOrderBook'), require('../model/FuturesPriceTriggeredOrder'), require('../model/FuturesTicker'), require('../model/FuturesTrade'), require('../model/InsuranceRecord'), require('../model/MyFuturesTrade'), require('../model/Position'), require('../model/PositionClose'), require('../model/TriggerOrderResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.GateApi) {
      root.GateApi = {};
    }
    root.GateApi.FuturesApi = factory(root.GateApi.ApiClient, root.GateApi.Contract, root.GateApi.FundingRateRecord, root.GateApi.FuturesAccount, root.GateApi.FuturesAccountBook, root.GateApi.FuturesCandlestick, root.GateApi.FuturesOrder, root.GateApi.FuturesOrderBook, root.GateApi.FuturesPriceTriggeredOrder, root.GateApi.FuturesTicker, root.GateApi.FuturesTrade, root.GateApi.InsuranceRecord, root.GateApi.MyFuturesTrade, root.GateApi.Position, root.GateApi.PositionClose, root.GateApi.TriggerOrderResponse);
  }
}(this, function(ApiClient, Contract, FundingRateRecord, FuturesAccount, FuturesAccountBook, FuturesCandlestick, FuturesOrder, FuturesOrderBook, FuturesPriceTriggeredOrder, FuturesTicker, FuturesTrade, InsuranceRecord, MyFuturesTrade, Position, PositionClose, TriggerOrderResponse) {
  'use strict';

  /**
   * Futures service.
   * @module api/FuturesApi
   * @version 4.5.1
   */

  /**
   * Constructs a new FuturesApi. 
   * @alias module:api/FuturesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelOrder operation.
     * @callback module:api/FuturesApi~cancelOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuturesOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a single order
     * @param {String} orderId ID returned on order successfully being created
     * @param {module:api/FuturesApi~cancelOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuturesOrder}
     */
    this.cancelOrder = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling cancelOrder");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FuturesOrder;

      return this.apiClient.callApi(
        '/futures/orders/{order_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelOrders operation.
     * @callback module:api/FuturesApi~cancelOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesOrder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel all &#x60;open&#x60; orders matched
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.side All bids or asks. Both included in not specified
     * @param {module:api/FuturesApi~cancelOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesOrder>}
     */
    this.cancelOrders = function(contract, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling cancelOrders");
      }


      var pathParams = {
      };
      var queryParams = {
        'contract': contract,
        'side': opts['side'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesOrder];

      return this.apiClient.callApi(
        '/futures/orders', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelPriceTriggeredOrder operation.
     * @callback module:api/FuturesApi~cancelPriceTriggeredOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuturesPriceTriggeredOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a single order
     * @param {String} orderId ID returned on order successfully being created
     * @param {module:api/FuturesApi~cancelPriceTriggeredOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuturesPriceTriggeredOrder}
     */
    this.cancelPriceTriggeredOrder = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling cancelPriceTriggeredOrder");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FuturesPriceTriggeredOrder;

      return this.apiClient.callApi(
        '/futures/price_orders/{order_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelPriceTriggeredOrderList operation.
     * @callback module:api/FuturesApi~cancelPriceTriggeredOrderListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesPriceTriggeredOrder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel all open orders
     * @param {String} contract Futures contract
     * @param {module:api/FuturesApi~cancelPriceTriggeredOrderListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesPriceTriggeredOrder>}
     */
    this.cancelPriceTriggeredOrderList = function(contract, callback) {
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling cancelPriceTriggeredOrderList");
      }


      var pathParams = {
      };
      var queryParams = {
        'contract': contract,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesPriceTriggeredOrder];

      return this.apiClient.callApi(
        '/futures/price_orders', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:api/FuturesApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuturesOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a futures order
     * @param {module:model/FuturesOrder} futuresOrder 
     * @param {module:api/FuturesApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuturesOrder}
     */
    this.createOrder = function(futuresOrder, callback) {
      var postBody = futuresOrder;

      // verify the required parameter 'futuresOrder' is set
      if (futuresOrder === undefined || futuresOrder === null) {
        throw new Error("Missing the required parameter 'futuresOrder' when calling createOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FuturesOrder;

      return this.apiClient.callApi(
        '/futures/orders', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPriceTriggeredOrder operation.
     * @callback module:api/FuturesApi~createPriceTriggeredOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggerOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a price-triggered order
     * @param {module:model/FuturesPriceTriggeredOrder} futuresPriceTriggeredOrder 
     * @param {module:api/FuturesApi~createPriceTriggeredOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggerOrderResponse}
     */
    this.createPriceTriggeredOrder = function(futuresPriceTriggeredOrder, callback) {
      var postBody = futuresPriceTriggeredOrder;

      // verify the required parameter 'futuresPriceTriggeredOrder' is set
      if (futuresPriceTriggeredOrder === undefined || futuresPriceTriggeredOrder === null) {
        throw new Error("Missing the required parameter 'futuresPriceTriggeredOrder' when calling createPriceTriggeredOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TriggerOrderResponse;

      return this.apiClient.callApi(
        '/futures/price_orders', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFuturesContract operation.
     * @callback module:api/FuturesApi~getFuturesContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single contract
     * @param {String} contract Futures contract
     * @param {module:api/FuturesApi~getFuturesContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contract}
     */
    this.getFuturesContract = function(contract, callback) {
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling getFuturesContract");
      }


      var pathParams = {
        'contract': contract
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Contract;

      return this.apiClient.callApi(
        '/futures/contracts/{contract}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyTrades operation.
     * @callback module:api/FuturesApi~getMyTradesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MyFuturesTrade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List personal trading history
     * @param {Object} opts Optional parameters
     * @param {String} opts.contract Futures contract, return related data only if specified
     * @param {Number} opts.order Futures order ID, return related data only if specified
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {String} opts.lastId Specify list staring point using the last record of &#x60;id&#x60; in previous list-query results
     * @param {module:api/FuturesApi~getMyTradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MyFuturesTrade>}
     */
    this.getMyTrades = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'contract': opts['contract'],
        'order': opts['order'],
        'limit': opts['limit'],
        'last_id': opts['lastId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [MyFuturesTrade];

      return this.apiClient.callApi(
        '/futures/my_trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrder operation.
     * @callback module:api/FuturesApi~getOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuturesOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single order
     * @param {String} orderId ID returned on order successfully being created
     * @param {module:api/FuturesApi~getOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuturesOrder}
     */
    this.getOrder = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrder");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FuturesOrder;

      return this.apiClient.callApi(
        '/futures/orders/{order_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPosition operation.
     * @callback module:api/FuturesApi~getPositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single position
     * @param {String} contract Futures contract
     * @param {module:api/FuturesApi~getPositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Position}
     */
    this.getPosition = function(contract, callback) {
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling getPosition");
      }


      var pathParams = {
        'contract': contract
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/futures/positions/{contract}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPriceTriggeredOrder operation.
     * @callback module:api/FuturesApi~getPriceTriggeredOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuturesPriceTriggeredOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single order
     * @param {String} orderId ID returned on order successfully being created
     * @param {module:api/FuturesApi~getPriceTriggeredOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuturesPriceTriggeredOrder}
     */
    this.getPriceTriggeredOrder = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getPriceTriggeredOrder");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FuturesPriceTriggeredOrder;

      return this.apiClient.callApi(
        '/futures/price_orders/{order_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesAccountBook operation.
     * @callback module:api/FuturesApi~listFuturesAccountBookCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesAccountBook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query account book
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {Number} opts.from Start timestamp
     * @param {Number} opts.to End timestamp
     * @param {module:model/String} opts.type Changing Type  - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding
     * @param {module:api/FuturesApi~listFuturesAccountBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesAccountBook>}
     */
    this.listFuturesAccountBook = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'from': opts['from'],
        'to': opts['to'],
        'type': opts['type'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesAccountBook];

      return this.apiClient.callApi(
        '/futures/account_book', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesAccounts operation.
     * @callback module:api/FuturesApi~listFuturesAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuturesAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query futures account
     * @param {module:api/FuturesApi~listFuturesAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuturesAccount}
     */
    this.listFuturesAccounts = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FuturesAccount;

      return this.apiClient.callApi(
        '/futures/accounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesCandlesticks operation.
     * @callback module:api/FuturesApi~listFuturesCandlesticksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesCandlestick>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get futures candlesticks
     * Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified
     * @param {Number} opts.to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time
     * @param {Number} opts.limit Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (default to 100)
     * @param {module:model/String} opts.interval Interval time between data points (default to &#39;5m&#39;)
     * @param {module:api/FuturesApi~listFuturesCandlesticksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesCandlestick>}
     */
    this.listFuturesCandlesticks = function(contract, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listFuturesCandlesticks");
      }


      var pathParams = {
      };
      var queryParams = {
        'contract': contract,
        'from': opts['from'],
        'to': opts['to'],
        'limit': opts['limit'],
        'interval': opts['interval'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesCandlestick];

      return this.apiClient.callApi(
        '/futures/candlesticks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesContracts operation.
     * @callback module:api/FuturesApi~listFuturesContractsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Contract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all futures contracts
     * @param {module:api/FuturesApi~listFuturesContractsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Contract>}
     */
    this.listFuturesContracts = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Contract];

      return this.apiClient.callApi(
        '/futures/contracts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesFundingRateHistory operation.
     * @callback module:api/FuturesApi~listFuturesFundingRateHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FundingRateRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Funding rate history
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {module:api/FuturesApi~listFuturesFundingRateHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FundingRateRecord>}
     */
    this.listFuturesFundingRateHistory = function(contract, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listFuturesFundingRateHistory");
      }


      var pathParams = {
      };
      var queryParams = {
        'contract': contract,
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FundingRateRecord];

      return this.apiClient.callApi(
        '/futures/funding_rate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesInsuranceLedger operation.
     * @callback module:api/FuturesApi~listFuturesInsuranceLedgerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InsuranceRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Futures insurance balance history
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {module:api/FuturesApi~listFuturesInsuranceLedgerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InsuranceRecord>}
     */
    this.listFuturesInsuranceLedger = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InsuranceRecord];

      return this.apiClient.callApi(
        '/futures/insurance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesOrderBook operation.
     * @callback module:api/FuturesApi~listFuturesOrderBookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuturesOrderBook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Futures order book
     * Bids will be sorted by price from high to low, while asks sorted reversely
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.interval Order depth. 0 means no aggregation is applied. default to 0 (default to &#39;0&#39;)
     * @param {Number} opts.limit Maximum number of order depth data in asks or bids (default to 10)
     * @param {module:api/FuturesApi~listFuturesOrderBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuturesOrderBook}
     */
    this.listFuturesOrderBook = function(contract, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listFuturesOrderBook");
      }


      var pathParams = {
      };
      var queryParams = {
        'contract': contract,
        'interval': opts['interval'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FuturesOrderBook;

      return this.apiClient.callApi(
        '/futures/order_book', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesTickers operation.
     * @callback module:api/FuturesApi~listFuturesTickersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesTicker>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List futures tickers
     * @param {Object} opts Optional parameters
     * @param {String} opts.contract Futures contract, return related data only if specified
     * @param {module:api/FuturesApi~listFuturesTickersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesTicker>}
     */
    this.listFuturesTickers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'contract': opts['contract'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesTicker];

      return this.apiClient.callApi(
        '/futures/tickers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesTrades operation.
     * @callback module:api/FuturesApi~listFuturesTradesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesTrade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Futures trading history
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {String} opts.lastId Specify list staring point using the last record of &#x60;id&#x60; in previous list-query results
     * @param {module:api/FuturesApi~listFuturesTradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesTrade>}
     */
    this.listFuturesTrades = function(contract, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listFuturesTrades");
      }


      var pathParams = {
      };
      var queryParams = {
        'contract': contract,
        'limit': opts['limit'],
        'last_id': opts['lastId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesTrade];

      return this.apiClient.callApi(
        '/futures/trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrders operation.
     * @callback module:api/FuturesApi~listOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesOrder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List futures orders
     * @param {String} contract Futures contract
     * @param {module:model/String} status List orders based on status
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {String} opts.lastId Specify list staring point using the last record of &#x60;id&#x60; in previous list-query results
     * @param {module:api/FuturesApi~listOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesOrder>}
     */
    this.listOrders = function(contract, status, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listOrders");
      }

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling listOrders");
      }


      var pathParams = {
      };
      var queryParams = {
        'contract': contract,
        'status': status,
        'limit': opts['limit'],
        'last_id': opts['lastId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesOrder];

      return this.apiClient.callApi(
        '/futures/orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPositionClose operation.
     * @callback module:api/FuturesApi~listPositionCloseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PositionClose>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List position close history
     * @param {Object} opts Optional parameters
     * @param {String} opts.contract Futures contract, return related data only if specified
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {module:api/FuturesApi~listPositionCloseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PositionClose>}
     */
    this.listPositionClose = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'contract': opts['contract'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PositionClose];

      return this.apiClient.callApi(
        '/futures/position_close', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPositions operation.
     * @callback module:api/FuturesApi~listPositionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Position>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all positions of a user
     * @param {module:api/FuturesApi~listPositionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Position>}
     */
    this.listPositions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Position];

      return this.apiClient.callApi(
        '/futures/positions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPriceTriggeredOrders operation.
     * @callback module:api/FuturesApi~listPriceTriggeredOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesPriceTriggeredOrder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all auto orders
     * @param {module:model/String} status List orders based on status
     * @param {Object} opts Optional parameters
     * @param {String} opts.contract Futures contract, return related data only if specified
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {Number} opts.offset List offset, starting from 0 (default to 0)
     * @param {module:api/FuturesApi~listPriceTriggeredOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesPriceTriggeredOrder>}
     */
    this.listPriceTriggeredOrders = function(status, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling listPriceTriggeredOrders");
      }


      var pathParams = {
      };
      var queryParams = {
        'status': status,
        'contract': opts['contract'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesPriceTriggeredOrder];

      return this.apiClient.callApi(
        '/futures/price_orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePositionLeverage operation.
     * @callback module:api/FuturesApi~updatePositionLeverageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update position leverage
     * @param {String} contract Futures contract
     * @param {String} leverage New position leverage
     * @param {module:api/FuturesApi~updatePositionLeverageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Position}
     */
    this.updatePositionLeverage = function(contract, leverage, callback) {
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling updatePositionLeverage");
      }

      // verify the required parameter 'leverage' is set
      if (leverage === undefined || leverage === null) {
        throw new Error("Missing the required parameter 'leverage' when calling updatePositionLeverage");
      }


      var pathParams = {
        'contract': contract
      };
      var queryParams = {
        'leverage': leverage,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/futures/positions/{contract}/leverage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePositionMargin operation.
     * @callback module:api/FuturesApi~updatePositionMarginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update position margin
     * @param {String} contract Futures contract
     * @param {String} change Margin change. Use positive number to increase margin, negative number otherwise.
     * @param {module:api/FuturesApi~updatePositionMarginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Position}
     */
    this.updatePositionMargin = function(contract, change, callback) {
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling updatePositionMargin");
      }

      // verify the required parameter 'change' is set
      if (change === undefined || change === null) {
        throw new Error("Missing the required parameter 'change' when calling updatePositionMargin");
      }


      var pathParams = {
        'contract': contract
      };
      var queryParams = {
        'change': change,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/futures/positions/{contract}/margin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePositionRiskLimit operation.
     * @callback module:api/FuturesApi~updatePositionRiskLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update position risk limit
     * @param {String} contract Futures contract
     * @param {String} riskLimit New position risk limit
     * @param {module:api/FuturesApi~updatePositionRiskLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Position}
     */
    this.updatePositionRiskLimit = function(contract, riskLimit, callback) {
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling updatePositionRiskLimit");
      }

      // verify the required parameter 'riskLimit' is set
      if (riskLimit === undefined || riskLimit === null) {
        throw new Error("Missing the required parameter 'riskLimit' when calling updatePositionRiskLimit");
      }


      var pathParams = {
        'contract': contract
      };
      var queryParams = {
        'risk_limit': riskLimit,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/futures/positions/{contract}/risk_limit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
