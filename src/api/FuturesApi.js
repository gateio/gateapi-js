/**
 * Gate API v4
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Contract', 'model/FundingRateRecord', 'model/FuturesCandlestick', 'model/FuturesOrderBook', 'model/FuturesTicker', 'model/FuturesTrade', 'model/InsuranceRecord'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Contract'), require('../model/FundingRateRecord'), require('../model/FuturesCandlestick'), require('../model/FuturesOrderBook'), require('../model/FuturesTicker'), require('../model/FuturesTrade'), require('../model/InsuranceRecord'));
  } else {
    // Browser globals (root is window)
    if (!root.GateApi) {
      root.GateApi = {};
    }
    root.GateApi.FuturesApi = factory(root.GateApi.ApiClient, root.GateApi.Contract, root.GateApi.FundingRateRecord, root.GateApi.FuturesCandlestick, root.GateApi.FuturesOrderBook, root.GateApi.FuturesTicker, root.GateApi.FuturesTrade, root.GateApi.InsuranceRecord);
  }
}(this, function(ApiClient, Contract, FundingRateRecord, FuturesCandlestick, FuturesOrderBook, FuturesTicker, FuturesTrade, InsuranceRecord) {
  'use strict';

  /**
   * Futures service.
   * @module api/FuturesApi
   */

  /**
   * Constructs a new FuturesApi. 
   * @alias module:api/FuturesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the listFuturesContracts operation.
     * @callback module:api/FuturesApi~listFuturesContractsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Contract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all futures contracts
     * @param {module:model/String} settle Settle currency
     * @param {module:api/FuturesApi~listFuturesContractsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Contract>}
     */
    this.listFuturesContracts = function(settle, callback) {
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listFuturesContracts");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Contract];
      return this.apiClient.callApi(
        '/futures/{settle}/contracts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFuturesContract operation.
     * @callback module:api/FuturesApi~getFuturesContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single contract
     * @param {module:model/String} settle Settle currency
     * @param {String} contract Futures contract
     * @param {module:api/FuturesApi~getFuturesContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contract}
     */
    this.getFuturesContract = function(settle, contract, callback) {
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling getFuturesContract");
      }
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling getFuturesContract");
      }

      var pathParams = {
        'settle': settle,
        'contract': contract
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Contract;
      return this.apiClient.callApi(
        '/futures/{settle}/contracts/{contract}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesOrderBook operation.
     * @callback module:api/FuturesApi~listFuturesOrderBookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuturesOrderBook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Futures order book
     * Bids will be sorted by price from high to low, while asks sorted reversely
     * @param {module:model/String} settle Settle currency
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.interval Order depth. 0 means no aggregation is applied. default to 0 (default to '0')
     * @param {Number} opts.limit Maximum number of order depth data in asks or bids (default to 10)
     * @param {module:api/FuturesApi~listFuturesOrderBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuturesOrderBook}
     */
    this.listFuturesOrderBook = function(settle, contract, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listFuturesOrderBook");
      }
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listFuturesOrderBook");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'contract': contract,
        'interval': opts['interval'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FuturesOrderBook;
      return this.apiClient.callApi(
        '/futures/{settle}/order_book', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesTrades operation.
     * @callback module:api/FuturesApi~listFuturesTradesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesTrade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Futures trading history
     * @param {module:model/String} settle Settle currency
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of records returned in one list (default to 100)
     * @param {String} opts.lastId Specify list staring point using the id of last record in previous list-query results  This parameter is deprecated. Use `from` and `to` instead to limit time range
     * @param {Number} opts.from Specify starting time in Unix seconds. If not specified, `to` and `limit` will be used to limit response items. If items between `from` and `to` are more than `limit`, only `limit` number will be returned. 
     * @param {Number} opts.to Specify end time in Unix seconds, default to current time
     * @param {module:api/FuturesApi~listFuturesTradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesTrade>}
     */
    this.listFuturesTrades = function(settle, contract, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listFuturesTrades");
      }
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listFuturesTrades");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'contract': contract,
        'limit': opts['limit'],
        'last_id': opts['lastId'],
        'from': opts['from'],
        'to': opts['to'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesTrade];
      return this.apiClient.callApi(
        '/futures/{settle}/trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesCandlesticks operation.
     * @callback module:api/FuturesApi~listFuturesCandlesticksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesCandlestick>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get futures candlesticks
     * Return specified contract candlesticks. If prefix `contract` with `mark_`, the contract's mark price candlesticks are returned; if prefix with `index_`, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying `from`, `to` and `interval`
     * @param {module:model/String} settle Settle currency
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to`to - 100 * interval` if not specified
     * @param {Number} opts.to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time
     * @param {Number} opts.limit Maximum recent data points returned. `limit` is conflicted with `from` and `to`. If either `from` or `to` is specified, request will be rejected. (default to 100)
     * @param {module:model/String} opts.interval Interval time between data points (default to '5m')
     * @param {module:api/FuturesApi~listFuturesCandlesticksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesCandlestick>}
     */
    this.listFuturesCandlesticks = function(settle, contract, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listFuturesCandlesticks");
      }
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listFuturesCandlesticks");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'contract': contract,
        'from': opts['from'],
        'to': opts['to'],
        'limit': opts['limit'],
        'interval': opts['interval'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesCandlestick];
      return this.apiClient.callApi(
        '/futures/{settle}/candlesticks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesTickers operation.
     * @callback module:api/FuturesApi~listFuturesTickersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesTicker>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List futures tickers
     * @param {module:model/String} settle Settle currency
     * @param {Object} opts Optional parameters
     * @param {String} opts.contract Futures contract, return related data only if specified
     * @param {module:api/FuturesApi~listFuturesTickersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesTicker>}
     */
    this.listFuturesTickers = function(settle, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listFuturesTickers");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'contract': opts['contract'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesTicker];
      return this.apiClient.callApi(
        '/futures/{settle}/tickers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesFundingRateHistory operation.
     * @callback module:api/FuturesApi~listFuturesFundingRateHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FundingRateRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Funding rate history
     * @param {module:model/String} settle Settle currency
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of records returned in one list (default to 100)
     * @param {module:api/FuturesApi~listFuturesFundingRateHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FundingRateRecord>}
     */
    this.listFuturesFundingRateHistory = function(settle, contract, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listFuturesFundingRateHistory");
      }
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listFuturesFundingRateHistory");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'contract': contract,
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FundingRateRecord];
      return this.apiClient.callApi(
        '/futures/{settle}/funding_rate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuturesInsuranceLedger operation.
     * @callback module:api/FuturesApi~listFuturesInsuranceLedgerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InsuranceRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Futures insurance balance history
     * @param {module:model/String} settle Settle currency
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of records returned in one list (default to 100)
     * @param {module:api/FuturesApi~listFuturesInsuranceLedgerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InsuranceRecord>}
     */
    this.listFuturesInsuranceLedger = function(settle, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listFuturesInsuranceLedger");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InsuranceRecord];
      return this.apiClient.callApi(
        '/futures/{settle}/insurance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
  };

  return exports;
}));
