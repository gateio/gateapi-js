/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeliveryContract', 'model/FuturesCandlestick', 'model/FuturesOrderBook', 'model/FuturesTicker', 'model/FuturesTrade', 'model/InsuranceRecord'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeliveryContract'), require('../model/FuturesCandlestick'), require('../model/FuturesOrderBook'), require('../model/FuturesTicker'), require('../model/FuturesTrade'), require('../model/InsuranceRecord'));
  } else {
    // Browser globals (root is window)
    if (!root.GateApi) {
      root.GateApi = {};
    }
    root.GateApi.DeliveryApi = factory(root.GateApi.ApiClient, root.GateApi.DeliveryContract, root.GateApi.FuturesCandlestick, root.GateApi.FuturesOrderBook, root.GateApi.FuturesTicker, root.GateApi.FuturesTrade, root.GateApi.InsuranceRecord);
  }
}(this, function(ApiClient, DeliveryContract, FuturesCandlestick, FuturesOrderBook, FuturesTicker, FuturesTrade, InsuranceRecord) {
  'use strict';

  /**
   * Delivery service.
   * @module api/DeliveryApi
   */

  /**
   * Constructs a new DeliveryApi. 
   * @alias module:api/DeliveryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the listDeliveryContracts operation.
     * @callback module:api/DeliveryApi~listDeliveryContractsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeliveryContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all futures contracts
     * @param {module:model/String} settle Settle currency
     * @param {module:api/DeliveryApi~listDeliveryContractsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeliveryContract>}
     */
    this.listDeliveryContracts = function(settle, callback) {
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listDeliveryContracts");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DeliveryContract];
      return this.apiClient.callApi(
        '/delivery/{settle}/contracts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveryContract operation.
     * @callback module:api/DeliveryApi~getDeliveryContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeliveryContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single contract
     * @param {module:model/String} settle Settle currency
     * @param {String} contract Futures contract
     * @param {module:api/DeliveryApi~getDeliveryContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeliveryContract}
     */
    this.getDeliveryContract = function(settle, contract, callback) {
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling getDeliveryContract");
      }
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling getDeliveryContract");
      }

      var pathParams = {
        'settle': settle,
        'contract': contract
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeliveryContract;
      return this.apiClient.callApi(
        '/delivery/{settle}/contracts/{contract}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeliveryOrderBook operation.
     * @callback module:api/DeliveryApi~listDeliveryOrderBookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuturesOrderBook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Futures order book
     * Bids will be sorted by price from high to low, while asks sorted reversely
     * @param {module:model/String} settle Settle currency
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.interval Order depth. 0 means no aggregation is applied. default to 0 (default to '0')
     * @param {Number} opts.limit Maximum number of order depth data in asks or bids (default to 10)
     * @param {Boolean} opts.withId Whether the order book update ID will be returned. This ID increases by 1 on every order book update (default to false)
     * @param {module:api/DeliveryApi~listDeliveryOrderBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuturesOrderBook}
     */
    this.listDeliveryOrderBook = function(settle, contract, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listDeliveryOrderBook");
      }
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listDeliveryOrderBook");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'contract': contract,
        'interval': opts['interval'],
        'limit': opts['limit'],
        'with_id': opts['withId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FuturesOrderBook;
      return this.apiClient.callApi(
        '/delivery/{settle}/order_book', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeliveryTrades operation.
     * @callback module:api/DeliveryApi~listDeliveryTradesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesTrade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Futures trading history
     * @param {module:model/String} settle Settle currency
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of records to be returned in a single list (default to 100)
     * @param {String} opts.lastId Specify the starting point for this list based on a previously retrieved id  This parameter is deprecated. Use `from` and `to` instead to limit time range
     * @param {Number} opts.from Specify starting time in Unix seconds. If not specified, `to` and `limit` will be used to limit response items. If items between `from` and `to` are more than `limit`, only `limit` number will be returned. 
     * @param {Number} opts.to Specify end time in Unix seconds, default to current time
     * @param {module:api/DeliveryApi~listDeliveryTradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesTrade>}
     */
    this.listDeliveryTrades = function(settle, contract, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listDeliveryTrades");
      }
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listDeliveryTrades");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'contract': contract,
        'limit': opts['limit'],
        'last_id': opts['lastId'],
        'from': opts['from'],
        'to': opts['to'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesTrade];
      return this.apiClient.callApi(
        '/delivery/{settle}/trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeliveryCandlesticks operation.
     * @callback module:api/DeliveryApi~listDeliveryCandlesticksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesCandlestick>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get futures candlesticks
     * Return specified contract candlesticks. If prefix `contract` with `mark_`, the contract's mark price candlesticks are returned; if prefix with `index_`, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying `from`, `to` and `interval`
     * @param {module:model/String} settle Settle currency
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to`to - 100 * interval` if not specified
     * @param {Number} opts.to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time
     * @param {Number} opts.limit Maximum recent data points to return. `limit` is conflicted with `from` and `to`. If either `from` or `to` is specified, request will be rejected. (default to 100)
     * @param {module:model/String} opts.interval Interval time between data points. Note that `1w` means natual week(Mon-Sun), while `7d` means every 7d since unix 0 (default to '5m')
     * @param {module:api/DeliveryApi~listDeliveryCandlesticksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesCandlestick>}
     */
    this.listDeliveryCandlesticks = function(settle, contract, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listDeliveryCandlesticks");
      }
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listDeliveryCandlesticks");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'contract': contract,
        'from': opts['from'],
        'to': opts['to'],
        'limit': opts['limit'],
        'interval': opts['interval'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesCandlestick];
      return this.apiClient.callApi(
        '/delivery/{settle}/candlesticks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeliveryTickers operation.
     * @callback module:api/DeliveryApi~listDeliveryTickersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesTicker>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List futures tickers
     * @param {module:model/String} settle Settle currency
     * @param {Object} opts Optional parameters
     * @param {String} opts.contract Futures contract
     * @param {module:api/DeliveryApi~listDeliveryTickersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesTicker>}
     */
    this.listDeliveryTickers = function(settle, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listDeliveryTickers");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'contract': opts['contract'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesTicker];
      return this.apiClient.callApi(
        '/delivery/{settle}/tickers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeliveryInsuranceLedger operation.
     * @callback module:api/DeliveryApi~listDeliveryInsuranceLedgerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InsuranceRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Futures insurance balance history
     * @param {module:model/String} settle Settle currency
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of records to be returned in a single list (default to 100)
     * @param {module:api/DeliveryApi~listDeliveryInsuranceLedgerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InsuranceRecord>}
     */
    this.listDeliveryInsuranceLedger = function(settle, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'settle' is set
      if (settle === undefined || settle === null) {
        throw new Error("Missing the required parameter 'settle' when calling listDeliveryInsuranceLedger");
      }

      var pathParams = {
        'settle': settle
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InsuranceRecord];
      return this.apiClient.callApi(
        '/delivery/{settle}/insurance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
  };

  return exports;
}));
