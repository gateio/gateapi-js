/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FuturesCandlestick', 'model/FuturesOrderBook', 'model/FuturesTrade', 'model/OptionsContract', 'model/OptionsSettlement', 'model/OptionsTicker', 'model/OptionsUnderlying', 'model/OptionsUnderlyingTicker'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FuturesCandlestick'), require('../model/FuturesOrderBook'), require('../model/FuturesTrade'), require('../model/OptionsContract'), require('../model/OptionsSettlement'), require('../model/OptionsTicker'), require('../model/OptionsUnderlying'), require('../model/OptionsUnderlyingTicker'));
  } else {
    // Browser globals (root is window)
    if (!root.GateApi) {
      root.GateApi = {};
    }
    root.GateApi.OptionsApi = factory(root.GateApi.ApiClient, root.GateApi.FuturesCandlestick, root.GateApi.FuturesOrderBook, root.GateApi.FuturesTrade, root.GateApi.OptionsContract, root.GateApi.OptionsSettlement, root.GateApi.OptionsTicker, root.GateApi.OptionsUnderlying, root.GateApi.OptionsUnderlyingTicker);
  }
}(this, function(ApiClient, FuturesCandlestick, FuturesOrderBook, FuturesTrade, OptionsContract, OptionsSettlement, OptionsTicker, OptionsUnderlying, OptionsUnderlyingTicker) {
  'use strict';

  /**
   * Options service.
   * @module api/OptionsApi
   */

  /**
   * Constructs a new OptionsApi. 
   * @alias module:api/OptionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the listOptionsUnderlyings operation.
     * @callback module:api/OptionsApi~listOptionsUnderlyingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OptionsUnderlying>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all underlyings
     * @param {module:api/OptionsApi~listOptionsUnderlyingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OptionsUnderlying>}
     */
    this.listOptionsUnderlyings = function(callback) {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [OptionsUnderlying];
      return this.apiClient.callApi(
        '/options/underlyings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsExpirations operation.
     * @callback module:api/OptionsApi~listOptionsExpirationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all expiration times
     * @param {String} underlying Underlying
     * @param {module:api/OptionsApi~listOptionsExpirationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    this.listOptionsExpirations = function(underlying, callback) {
      var postBody = null;
      // verify the required parameter 'underlying' is set
      if (underlying === undefined || underlying === null) {
        throw new Error("Missing the required parameter 'underlying' when calling listOptionsExpirations");
      }

      var pathParams = {
      };
      var queryParams = {
        'underlying': underlying,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];
      return this.apiClient.callApi(
        '/options/expirations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsContracts operation.
     * @callback module:api/OptionsApi~listOptionsContractsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OptionsContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the contracts with specified underlying and expiration time
     * @param {String} underlying Underlying
     * @param {Object} opts Optional parameters
     * @param {Number} opts.expiration Unix timestamp of the expiration time
     * @param {module:api/OptionsApi~listOptionsContractsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OptionsContract>}
     */
    this.listOptionsContracts = function(underlying, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'underlying' is set
      if (underlying === undefined || underlying === null) {
        throw new Error("Missing the required parameter 'underlying' when calling listOptionsContracts");
      }

      var pathParams = {
      };
      var queryParams = {
        'underlying': underlying,
        'expiration': opts['expiration'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [OptionsContract];
      return this.apiClient.callApi(
        '/options/contracts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptionsContract operation.
     * @callback module:api/OptionsApi~getOptionsContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OptionsContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query specified contract detail
     * @param {String} contract 
     * @param {module:api/OptionsApi~getOptionsContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OptionsContract}
     */
    this.getOptionsContract = function(contract, callback) {
      var postBody = null;
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling getOptionsContract");
      }

      var pathParams = {
        'contract': contract
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OptionsContract;
      return this.apiClient.callApi(
        '/options/contracts/{contract}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsSettlements operation.
     * @callback module:api/OptionsApi~listOptionsSettlementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OptionsSettlement>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List settlement history
     * @param {String} underlying Underlying
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of records to be returned in a single list (default to 100)
     * @param {Number} opts.offset List offset, starting from 0 (default to 0)
     * @param {Number} opts.from Start timestamp
     * @param {Number} opts.to End timestamp
     * @param {module:api/OptionsApi~listOptionsSettlementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OptionsSettlement>}
     */
    this.listOptionsSettlements = function(underlying, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'underlying' is set
      if (underlying === undefined || underlying === null) {
        throw new Error("Missing the required parameter 'underlying' when calling listOptionsSettlements");
      }

      var pathParams = {
      };
      var queryParams = {
        'underlying': underlying,
        'limit': opts['limit'],
        'offset': opts['offset'],
        'from': opts['from'],
        'to': opts['to'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [OptionsSettlement];
      return this.apiClient.callApi(
        '/options/settlements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptionsSettlement operation.
     * @callback module:api/OptionsApi~getOptionsSettlementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OptionsSettlement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specified contract's settlement
     * @param {String} contract 
     * @param {String} underlying Underlying
     * @param {Number} at 
     * @param {module:api/OptionsApi~getOptionsSettlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OptionsSettlement}
     */
    this.getOptionsSettlement = function(contract, underlying, at, callback) {
      var postBody = null;
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling getOptionsSettlement");
      }
      // verify the required parameter 'underlying' is set
      if (underlying === undefined || underlying === null) {
        throw new Error("Missing the required parameter 'underlying' when calling getOptionsSettlement");
      }
      // verify the required parameter 'at' is set
      if (at === undefined || at === null) {
        throw new Error("Missing the required parameter 'at' when calling getOptionsSettlement");
      }

      var pathParams = {
        'contract': contract
      };
      var queryParams = {
        'underlying': underlying,
        'at': at,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OptionsSettlement;
      return this.apiClient.callApi(
        '/options/settlements/{contract}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsOrderBook operation.
     * @callback module:api/OptionsApi~listOptionsOrderBookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuturesOrderBook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Futures order book
     * Bids will be sorted by price from high to low, while asks sorted reversely
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.interval Order depth. 0 means no aggregation is applied. default to 0 (default to '0')
     * @param {Number} opts.limit Maximum number of order depth data in asks or bids (default to 10)
     * @param {Boolean} opts.withId Whether the order book update ID will be returned. This ID increases by 1 on every order book update (default to false)
     * @param {module:api/OptionsApi~listOptionsOrderBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuturesOrderBook}
     */
    this.listOptionsOrderBook = function(contract, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listOptionsOrderBook");
      }

      var pathParams = {
      };
      var queryParams = {
        'contract': contract,
        'interval': opts['interval'],
        'limit': opts['limit'],
        'with_id': opts['withId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FuturesOrderBook;
      return this.apiClient.callApi(
        '/options/order_book', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsTickers operation.
     * @callback module:api/OptionsApi~listOptionsTickersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OptionsTicker>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tickers of options contracts
     * @param {String} underlying Underlying
     * @param {module:api/OptionsApi~listOptionsTickersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OptionsTicker>}
     */
    this.listOptionsTickers = function(underlying, callback) {
      var postBody = null;
      // verify the required parameter 'underlying' is set
      if (underlying === undefined || underlying === null) {
        throw new Error("Missing the required parameter 'underlying' when calling listOptionsTickers");
      }

      var pathParams = {
      };
      var queryParams = {
        'underlying': underlying,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [OptionsTicker];
      return this.apiClient.callApi(
        '/options/tickers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsUnderlyingTickers operation.
     * @callback module:api/OptionsApi~listOptionsUnderlyingTickersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OptionsUnderlyingTicker} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get underlying ticker
     * @param {String} underlying Underlying
     * @param {module:api/OptionsApi~listOptionsUnderlyingTickersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OptionsUnderlyingTicker}
     */
    this.listOptionsUnderlyingTickers = function(underlying, callback) {
      var postBody = null;
      // verify the required parameter 'underlying' is set
      if (underlying === undefined || underlying === null) {
        throw new Error("Missing the required parameter 'underlying' when calling listOptionsUnderlyingTickers");
      }

      var pathParams = {
        'underlying': underlying
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OptionsUnderlyingTicker;
      return this.apiClient.callApi(
        '/options/underlying/tickers/{underlying}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsCandlesticks operation.
     * @callback module:api/OptionsApi~listOptionsCandlesticksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesCandlestick>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get futures candlesticks
     * @param {String} contract Futures contract
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of records to be returned in a single list (default to 100)
     * @param {Number} opts.from Start timestamp
     * @param {Number} opts.to End timestamp
     * @param {module:model/String} opts.interval Interval time between data points (default to '5m')
     * @param {module:api/OptionsApi~listOptionsCandlesticksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesCandlestick>}
     */
    this.listOptionsCandlesticks = function(contract, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling listOptionsCandlesticks");
      }

      var pathParams = {
      };
      var queryParams = {
        'contract': contract,
        'limit': opts['limit'],
        'from': opts['from'],
        'to': opts['to'],
        'interval': opts['interval'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesCandlestick];
      return this.apiClient.callApi(
        '/options/candlesticks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsUnderlyingCandlesticks operation.
     * @callback module:api/OptionsApi~listOptionsUnderlyingCandlesticksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesCandlestick>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark price candlesticks of an underlying
     * @param {String} underlying Underlying
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of records to be returned in a single list (default to 100)
     * @param {Number} opts.from Start timestamp
     * @param {Number} opts.to End timestamp
     * @param {module:model/String} opts.interval Interval time between data points (default to '5m')
     * @param {module:api/OptionsApi~listOptionsUnderlyingCandlesticksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesCandlestick>}
     */
    this.listOptionsUnderlyingCandlesticks = function(underlying, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'underlying' is set
      if (underlying === undefined || underlying === null) {
        throw new Error("Missing the required parameter 'underlying' when calling listOptionsUnderlyingCandlesticks");
      }

      var pathParams = {
      };
      var queryParams = {
        'underlying': underlying,
        'limit': opts['limit'],
        'from': opts['from'],
        'to': opts['to'],
        'interval': opts['interval'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesCandlestick];
      return this.apiClient.callApi(
        '/options/underlying/candlesticks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsTrades operation.
     * @callback module:api/OptionsApi~listOptionsTradesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FuturesTrade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Options trade history
     * @param {Object} opts Optional parameters
     * @param {String} opts.contract Contract name
     * @param {String} opts.type `C` is call, while `P` is put
     * @param {Number} opts.limit Maximum number of records to be returned in a single list (default to 100)
     * @param {Number} opts.offset List offset, starting from 0 (default to 0)
     * @param {Number} opts.from Start timestamp
     * @param {Number} opts.to End timestamp
     * @param {module:api/OptionsApi~listOptionsTradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FuturesTrade>}
     */
    this.listOptionsTrades = function(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'contract': opts['contract'],
        'type': opts['type'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'from': opts['from'],
        'to': opts['to'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FuturesTrade];
      return this.apiClient.callApi(
        '/options/trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
  };

  return exports;
}));
