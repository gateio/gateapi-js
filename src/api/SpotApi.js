/**
 * Gate API v4
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * OpenAPI spec version: 4.7.3
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CurrencyPair', 'model/Order', 'model/OrderBook', 'model/SpotAccount', 'model/Ticker', 'model/Trade'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CurrencyPair'), require('../model/Order'), require('../model/OrderBook'), require('../model/SpotAccount'), require('../model/Ticker'), require('../model/Trade'));
  } else {
    // Browser globals (root is window)
    if (!root.GateApi) {
      root.GateApi = {};
    }
    root.GateApi.SpotApi = factory(root.GateApi.ApiClient, root.GateApi.CurrencyPair, root.GateApi.Order, root.GateApi.OrderBook, root.GateApi.SpotAccount, root.GateApi.Ticker, root.GateApi.Trade);
  }
}(this, function(ApiClient, CurrencyPair, Order, OrderBook, SpotAccount, Ticker, Trade) {
  'use strict';

  /**
   * Spot service.
   * @module api/SpotApi
   * @version 4.7.3
   */

  /**
   * Constructs a new SpotApi. 
   * @alias module:api/SpotApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelOrder operation.
     * @callback module:api/SpotApi~cancelOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a single order
     * @param {String} orderId ID returned on order successfully being created
     * @param {String} currencyPair Currency pair
     * @param {module:api/SpotApi~cancelOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.cancelOrder = function(orderId, currencyPair, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling cancelOrder");
      }

      // verify the required parameter 'currencyPair' is set
      if (currencyPair === undefined || currencyPair === null) {
        throw new Error("Missing the required parameter 'currencyPair' when calling cancelOrder");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
        'currency_pair': currencyPair,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/spot/orders/{order_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelOrders operation.
     * @callback module:api/SpotApi~cancelOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel all &#x60;open&#x60; orders in specified currency pair
     * @param {String} currencyPair Currency pair
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.side All bids or asks. Both included in not specified
     * @param {module:model/String} opts.account Specify account type. Default to all account types being included
     * @param {module:api/SpotApi~cancelOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    this.cancelOrders = function(currencyPair, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'currencyPair' is set
      if (currencyPair === undefined || currencyPair === null) {
        throw new Error("Missing the required parameter 'currencyPair' when calling cancelOrders");
      }


      var pathParams = {
      };
      var queryParams = {
        'currency_pair': currencyPair,
        'side': opts['side'],
        'account': opts['account'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Order];

      return this.apiClient.callApi(
        '/spot/orders', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:api/SpotApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order
     * @param {module:model/Order} order 
     * @param {module:api/SpotApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.createOrder = function(order, callback) {
      var postBody = order;

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling createOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/spot/orders', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrencyPair operation.
     * @callback module:api/SpotApi~getCurrencyPairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyPair} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detail of one single order
     * @param {String} currencyPair Currency pair
     * @param {module:api/SpotApi~getCurrencyPairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyPair}
     */
    this.getCurrencyPair = function(currencyPair, callback) {
      var postBody = null;

      // verify the required parameter 'currencyPair' is set
      if (currencyPair === undefined || currencyPair === null) {
        throw new Error("Missing the required parameter 'currencyPair' when calling getCurrencyPair");
      }


      var pathParams = {
        'currency_pair': currencyPair
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CurrencyPair;

      return this.apiClient.callApi(
        '/spot/currency_pairs/{currency_pair}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrder operation.
     * @callback module:api/SpotApi~getOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single order
     * @param {String} orderId ID returned on order successfully being created
     * @param {String} currencyPair Currency pair
     * @param {module:api/SpotApi~getOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.getOrder = function(orderId, currencyPair, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrder");
      }

      // verify the required parameter 'currencyPair' is set
      if (currencyPair === undefined || currencyPair === null) {
        throw new Error("Missing the required parameter 'currencyPair' when calling getOrder");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
        'currency_pair': currencyPair,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/spot/orders/{order_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCandlesticks operation.
     * @callback module:api/SpotApi~listCandlesticksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<[String]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Market candlesticks
     * Candlestick data will start from (current time - limit * interval), end at current time
     * @param {String} currencyPair Currency pair
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {module:model/String} opts.interval Interval time between data points (default to &#39;30m&#39;)
     * @param {module:api/SpotApi~listCandlesticksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[String]>}
     */
    this.listCandlesticks = function(currencyPair, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'currencyPair' is set
      if (currencyPair === undefined || currencyPair === null) {
        throw new Error("Missing the required parameter 'currencyPair' when calling listCandlesticks");
      }


      var pathParams = {
      };
      var queryParams = {
        'currency_pair': currencyPair,
        'limit': opts['limit'],
        'interval': opts['interval'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [['String']];

      return this.apiClient.callApi(
        '/spot/candlesticks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCurrencyPairs operation.
     * @callback module:api/SpotApi~listCurrencyPairsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurrencyPair>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all currency pairs supported
     * @param {module:api/SpotApi~listCurrencyPairsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurrencyPair>}
     */
    this.listCurrencyPairs = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CurrencyPair];

      return this.apiClient.callApi(
        '/spot/currency_pairs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listMyTrades operation.
     * @callback module:api/SpotApi~listMyTradesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Trade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List personal trading history
     * @param {String} currencyPair Currency pair
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {Number} opts.page Page number (default to 1)
     * @param {String} opts.orderId List all trades of specified order
     * @param {module:api/SpotApi~listMyTradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Trade>}
     */
    this.listMyTrades = function(currencyPair, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'currencyPair' is set
      if (currencyPair === undefined || currencyPair === null) {
        throw new Error("Missing the required parameter 'currencyPair' when calling listMyTrades");
      }


      var pathParams = {
      };
      var queryParams = {
        'currency_pair': currencyPair,
        'limit': opts['limit'],
        'page': opts['page'],
        'order_id': opts['orderId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Trade];

      return this.apiClient.callApi(
        '/spot/my_trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrderBook operation.
     * @callback module:api/SpotApi~listOrderBookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderBook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve order book
     * Order book will be sorted by price from high to low on bids; reversed on asks
     * @param {String} currencyPair Currency pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.interval Price precision of order book. 0 means no aggregation is applied (default to &#39;0&#39;)
     * @param {Number} opts.limit Maximum number of order depth data in asks or bids (default to 10)
     * @param {module:api/SpotApi~listOrderBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderBook}
     */
    this.listOrderBook = function(currencyPair, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'currencyPair' is set
      if (currencyPair === undefined || currencyPair === null) {
        throw new Error("Missing the required parameter 'currencyPair' when calling listOrderBook");
      }


      var pathParams = {
      };
      var queryParams = {
        'currency_pair': currencyPair,
        'interval': opts['interval'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OrderBook;

      return this.apiClient.callApi(
        '/spot/order_book', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrders operation.
     * @callback module:api/SpotApi~listOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List orders
     * @param {String} currencyPair Currency pair
     * @param {module:model/String} status List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {module:api/SpotApi~listOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    this.listOrders = function(currencyPair, status, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'currencyPair' is set
      if (currencyPair === undefined || currencyPair === null) {
        throw new Error("Missing the required parameter 'currencyPair' when calling listOrders");
      }

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling listOrders");
      }


      var pathParams = {
      };
      var queryParams = {
        'currency_pair': currencyPair,
        'status': status,
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Order];

      return this.apiClient.callApi(
        '/spot/orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpotAccounts operation.
     * @callback module:api/SpotApi~listSpotAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SpotAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List spot accounts
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency Retrieved specified currency related data
     * @param {module:api/SpotApi~listSpotAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SpotAccount>}
     */
    this.listSpotAccounts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key', 'api_sign', 'api_timestamp'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SpotAccount];

      return this.apiClient.callApi(
        '/spot/accounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listTickers operation.
     * @callback module:api/SpotApi~listTickersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ticker>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve ticker information
     * Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyPair Currency pair
     * @param {module:api/SpotApi~listTickersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ticker>}
     */
    this.listTickers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'currency_pair': opts['currencyPair'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Ticker];

      return this.apiClient.callApi(
        '/spot/tickers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrades operation.
     * @callback module:api/SpotApi~listTradesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Trade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve market trades
     * @param {String} currencyPair Currency pair
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of record returned in one list (default to 100)
     * @param {String} opts.lastId Specify list staring point using the last record of &#x60;id&#x60; in previous list-query results
     * @param {module:api/SpotApi~listTradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Trade>}
     */
    this.listTrades = function(currencyPair, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'currencyPair' is set
      if (currencyPair === undefined || currencyPair === null) {
        throw new Error("Missing the required parameter 'currencyPair' when calling listTrades");
      }


      var pathParams = {
      };
      var queryParams = {
        'currency_pair': currencyPair,
        'limit': opts['limit'],
        'last_id': opts['lastId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Trade];

      return this.apiClient.callApi(
        '/spot/trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
