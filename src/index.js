/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Contract', 'model/ContractStat', 'model/CrossMarginCurrency', 'model/Currency', 'model/CurrencyChain', 'model/CurrencyPair', 'model/DeliveryContract', 'model/FlashSwapCurrency', 'model/FundingBookItem', 'model/FundingRateRecord', 'model/FuturesCandlestick', 'model/FuturesIndexConstituents', 'model/FuturesLiquidate', 'model/FuturesOrderBook', 'model/FuturesOrderBookItem', 'model/FuturesTicker', 'model/FuturesTrade', 'model/IndexConstituent', 'model/InsuranceRecord', 'model/MarginCurrencyPair', 'model/OptionsContract', 'model/OptionsSettlement', 'model/OptionsTicker', 'model/OptionsUnderlying', 'model/OptionsUnderlyingTicker', 'model/OrderBook', 'model/SystemTime', 'model/Ticker', 'model/Trade', 'api/DeliveryApi', 'api/FlashSwapApi', 'api/FuturesApi', 'api/MarginApi', 'api/OptionsApi', 'api/SpotApi', 'api/WalletApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Contract'), require('./model/ContractStat'), require('./model/CrossMarginCurrency'), require('./model/Currency'), require('./model/CurrencyChain'), require('./model/CurrencyPair'), require('./model/DeliveryContract'), require('./model/FlashSwapCurrency'), require('./model/FundingBookItem'), require('./model/FundingRateRecord'), require('./model/FuturesCandlestick'), require('./model/FuturesIndexConstituents'), require('./model/FuturesLiquidate'), require('./model/FuturesOrderBook'), require('./model/FuturesOrderBookItem'), require('./model/FuturesTicker'), require('./model/FuturesTrade'), require('./model/IndexConstituent'), require('./model/InsuranceRecord'), require('./model/MarginCurrencyPair'), require('./model/OptionsContract'), require('./model/OptionsSettlement'), require('./model/OptionsTicker'), require('./model/OptionsUnderlying'), require('./model/OptionsUnderlyingTicker'), require('./model/OrderBook'), require('./model/SystemTime'), require('./model/Ticker'), require('./model/Trade'), require('./api/DeliveryApi'), require('./api/FlashSwapApi'), require('./api/FuturesApi'), require('./api/MarginApi'), require('./api/OptionsApi'), require('./api/SpotApi'), require('./api/WalletApi'));
  }
}(function(ApiClient, Contract, ContractStat, CrossMarginCurrency, Currency, CurrencyChain, CurrencyPair, DeliveryContract, FlashSwapCurrency, FundingBookItem, FundingRateRecord, FuturesCandlestick, FuturesIndexConstituents, FuturesLiquidate, FuturesOrderBook, FuturesOrderBookItem, FuturesTicker, FuturesTrade, IndexConstituent, InsuranceRecord, MarginCurrencyPair, OptionsContract, OptionsSettlement, OptionsTicker, OptionsUnderlying, OptionsUnderlyingTicker, OrderBook, SystemTime, Ticker, Trade, DeliveryApi, FlashSwapApi, FuturesApi, MarginApi, OptionsApi, SpotApi, WalletApi) {
  'use strict';

  /**
   * Welcome_to_Gate_io_APIAPIv4_provides_spot_margin_and_futures_trading_operations__There_are_public_APIs_to_retrieve_the_real_time_market_statistics_and_private_APIs_which_needs_authentication_to_trade_on_users_behalf_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var GateApi = require('index'); // See note below*.
   * var xxxSvc = new GateApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new GateApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new GateApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new GateApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Contract model constructor.
     * @property {module:model/Contract}
     */
    Contract: Contract,
    /**
     * The ContractStat model constructor.
     * @property {module:model/ContractStat}
     */
    ContractStat: ContractStat,
    /**
     * The CrossMarginCurrency model constructor.
     * @property {module:model/CrossMarginCurrency}
     */
    CrossMarginCurrency: CrossMarginCurrency,
    /**
     * The Currency model constructor.
     * @property {module:model/Currency}
     */
    Currency: Currency,
    /**
     * The CurrencyChain model constructor.
     * @property {module:model/CurrencyChain}
     */
    CurrencyChain: CurrencyChain,
    /**
     * The CurrencyPair model constructor.
     * @property {module:model/CurrencyPair}
     */
    CurrencyPair: CurrencyPair,
    /**
     * The DeliveryContract model constructor.
     * @property {module:model/DeliveryContract}
     */
    DeliveryContract: DeliveryContract,
    /**
     * The FlashSwapCurrency model constructor.
     * @property {module:model/FlashSwapCurrency}
     */
    FlashSwapCurrency: FlashSwapCurrency,
    /**
     * The FundingBookItem model constructor.
     * @property {module:model/FundingBookItem}
     */
    FundingBookItem: FundingBookItem,
    /**
     * The FundingRateRecord model constructor.
     * @property {module:model/FundingRateRecord}
     */
    FundingRateRecord: FundingRateRecord,
    /**
     * The FuturesCandlestick model constructor.
     * @property {module:model/FuturesCandlestick}
     */
    FuturesCandlestick: FuturesCandlestick,
    /**
     * The FuturesIndexConstituents model constructor.
     * @property {module:model/FuturesIndexConstituents}
     */
    FuturesIndexConstituents: FuturesIndexConstituents,
    /**
     * The FuturesLiquidate model constructor.
     * @property {module:model/FuturesLiquidate}
     */
    FuturesLiquidate: FuturesLiquidate,
    /**
     * The FuturesOrderBook model constructor.
     * @property {module:model/FuturesOrderBook}
     */
    FuturesOrderBook: FuturesOrderBook,
    /**
     * The FuturesOrderBookItem model constructor.
     * @property {module:model/FuturesOrderBookItem}
     */
    FuturesOrderBookItem: FuturesOrderBookItem,
    /**
     * The FuturesTicker model constructor.
     * @property {module:model/FuturesTicker}
     */
    FuturesTicker: FuturesTicker,
    /**
     * The FuturesTrade model constructor.
     * @property {module:model/FuturesTrade}
     */
    FuturesTrade: FuturesTrade,
    /**
     * The IndexConstituent model constructor.
     * @property {module:model/IndexConstituent}
     */
    IndexConstituent: IndexConstituent,
    /**
     * The InsuranceRecord model constructor.
     * @property {module:model/InsuranceRecord}
     */
    InsuranceRecord: InsuranceRecord,
    /**
     * The MarginCurrencyPair model constructor.
     * @property {module:model/MarginCurrencyPair}
     */
    MarginCurrencyPair: MarginCurrencyPair,
    /**
     * The OptionsContract model constructor.
     * @property {module:model/OptionsContract}
     */
    OptionsContract: OptionsContract,
    /**
     * The OptionsSettlement model constructor.
     * @property {module:model/OptionsSettlement}
     */
    OptionsSettlement: OptionsSettlement,
    /**
     * The OptionsTicker model constructor.
     * @property {module:model/OptionsTicker}
     */
    OptionsTicker: OptionsTicker,
    /**
     * The OptionsUnderlying model constructor.
     * @property {module:model/OptionsUnderlying}
     */
    OptionsUnderlying: OptionsUnderlying,
    /**
     * The OptionsUnderlyingTicker model constructor.
     * @property {module:model/OptionsUnderlyingTicker}
     */
    OptionsUnderlyingTicker: OptionsUnderlyingTicker,
    /**
     * The OrderBook model constructor.
     * @property {module:model/OrderBook}
     */
    OrderBook: OrderBook,
    /**
     * The SystemTime model constructor.
     * @property {module:model/SystemTime}
     */
    SystemTime: SystemTime,
    /**
     * The Ticker model constructor.
     * @property {module:model/Ticker}
     */
    Ticker: Ticker,
    /**
     * The Trade model constructor.
     * @property {module:model/Trade}
     */
    Trade: Trade,
    /**
     * The DeliveryApi service constructor.
     * @property {module:api/DeliveryApi}
     */
    DeliveryApi: DeliveryApi,
    /**
     * The FlashSwapApi service constructor.
     * @property {module:api/FlashSwapApi}
     */
    FlashSwapApi: FlashSwapApi,
    /**
     * The FuturesApi service constructor.
     * @property {module:api/FuturesApi}
     */
    FuturesApi: FuturesApi,
    /**
     * The MarginApi service constructor.
     * @property {module:api/MarginApi}
     */
    MarginApi: MarginApi,
    /**
     * The OptionsApi service constructor.
     * @property {module:api/OptionsApi}
     */
    OptionsApi: OptionsApi,
    /**
     * The SpotApi service constructor.
     * @property {module:api/SpotApi}
     */
    SpotApi: SpotApi,
    /**
     * The WalletApi service constructor.
     * @property {module:api/WalletApi}
     */
    WalletApi: WalletApi
  };

  return exports;
}));
